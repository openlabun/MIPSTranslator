export const RV32I_INSTRUCTIONS: { [key: string]: string } = {
  // Tipo U (Pseudo o especiales)
  "lui": "Load Upper Immediate",
  "auipc": "Add Upper Immediate to PC",

  // Tipo J
  "j": "Jump",
  "jal": "Jump and Link",

  // Tipo I
  "jalr": "Jump and Link Register",
  "lb": "Load Byte",
  "lh": "Load Halfword",
  "lw": "Load Word",
  "lbu": "Load Byte Unsigned",
  "lhu": "Load Halfword Unsigned",
  "addi": "Add Immediate",
  "addiu": "Add Immediate Unsigned",
  "slti": "Set Less Than Immediate",
  "sltiu": "Set Less Than Immediate Unsigned",
  "xori": "Xor Immediate",
  "ori": "Or Immediate",
  "andi": "And Immediate",
  "slli": "Shift Left Logical Immediate",
  "srli": "Shift Right Logical Immediate",
  "srai": "Shift Right Arithmetic Immediate",
  "lwl": "Load Word Left",
  "lwr": "Load Word Right",
  "ulh": "Unaligned Load Halfword",
  "ulhu": "Unaligned Load Halfword Unsigned",
  "ulw": "Unaligned Load Word",
  "beq": "Branch if Equal",
  "bne": "Branch if Not Equal",
  "bgez": "Branch if Greater or Equal Zero",
  "bltz": "Branch if Less Than Zero",
  "bgezal": "Branch if GEZ and Link",
  "bltzal": "Branch if LTZ and Link",
  "beqz": "Branch if Equal to Zero",
  "bnez": "Branch if Not Equal to Zero",
  "bgtz": "Branch if Greater Than Zero",
  "blez": "Branch if Less or Equal Zero",
  "bge": "Branch if Greater or Equal",
  "bgt": "Branch if Greater Than",
  "ble": "Branch if Less or Equal",
  "blt": "Branch if Less Than",
  "la": "Load Address",
  "li": "Load Immediate",
  "li.d": "Load Immediate Double",
  "li.s": "Load Immediate Single",
  "lwcz": "Load Word from Coprocessor z",
  "swcz": "Store Word to Coprocessor z",
  "bczt": "Branch Coprocessor z True",
  "bczf": "Branch Coprocessor z False",

  // Tipo S
  "sb": "Store Byte",
  "sh": "Store Halfword",
  "sw": "Store Word",
  "sd": "Store Double Word",
  "swl": "Store Word Left",
  "swr": "Store Word Right",
  "ush": "Unaligned Store Halfword",
  "usw": "Unaligned Store Word",
  "swez": "Store Word in Coprocessor z",

  // Tipo R
  "add": "Add",
  "addu": "Add Unsigned",
  "sub": "Subtract",
  "subu": "Subtract Unsigned",
  "sll": "Shift Left Logical",
  "sllv": "Shift Left Logical Variable",
  "srl": "Shift Right Logical",
  "srlv": "Shift Right Logical Variable",
  "sra": "Shift Right Arithmetic",
  "srav": "Shift Right Arithmetic Variable",
  "and": "And",
  "or": "Or",
  "xor": "Exclusive Or",
  "nor": "Not Or",
  "slt": "Set on Less Than",
  "sltu": "Set on Less Than Unsigned",
  "div": "Divide",
  "divu": "Divide Unsigned",
  "rem": "Remainder",
  "remu": "Remainder Unsigned",
  "mult": "Multiply",
  "multu": "Multiply Unsigned",
  "mul": "Multiply (rd result)",
  "mulo": "Multiply with Overflow",
  "mulou": "Multiply Unsigned with Overflow",
  "abs": "Absolute Value",
  "neg": "Negate",
  "negu": "Negate Unsigned",
  "not": "Bitwise Not",
  "rol": "Rotate Left",
  "ror": "Rotate Right",
  "seq": "Set if Equal",
  "sne": "Set if Not Equal",
  "sgt": "Set if Greater Than",
  "sgtu": "Set if Greater Than Unsigned",
  "sge": "Set if Greater or Equal",
  "sgeu": "Set if Greater or Equal Unsigned",
  "sle": "Set if Less or Equal",
  "sleu": "Set if Less or Equal Unsigned",

  // Control y sistema
  "jr": "Jump Register",
  "move": "Move Register",
  "mfhi": "Move From HI",
  "mflo": "Move From LO",
  "mthi": "Move To HI",
  "mtlo": "Move To LO",
  "mfcz": "Move From Coprocessor z",
  "mtcz": "Move To Coprocessor z",
  "mfc1.d": "Move from Coprocessor 1 Double",
  "syscall": "System Call",
  "break": "Breakpoint Exception",
  "rfe": "Return From Exception",
  "nop": "No Operation"
};
